<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端学习路线</title>
      <link href="https://linhieng.com/2021/09/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>https://linhieng.com/2021/09/15/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="推荐的网站和工具"><a href="#推荐的网站和工具" class="headerlink" title="推荐的网站和工具"></a>推荐的网站和工具</h3><ul><li>前端必备网站 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">MDN</a>。</li><li>开发工具下载 <a href="https://code.visualstudio.com/Download">VCcode</a></li><li>笔记软件 <a href="https://www.onenote.com/Download%3Fomkt%3Dzh-CN">OneNote</a><br>或者学习 <a href="https://markdown.com.cn/basic-syntax/">MarkDown格式</a>, 推荐搭配 <a href="https://typora.io/#windows">typora</a> 使用</li></ul><h3 id="推荐观看的视频"><a href="#推荐观看的视频" class="headerlink" title="推荐观看的视频"></a>推荐观看的视频</h3><blockquote><p>前期视频</p></blockquote><ol><li><p><a href="https://www.bilibili.com/video/BV1DE411c7HJ?spm_id_from=333.999.0.0">介绍前端</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1YW411T7GX?spm_id_from=333.788.b_636f6d6d656e74.9">HTML+CSS</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1YW411T7GX?spm_id_from=333.788.b_636f6d6d656e74.9">js基础</a></p></li><li><p><a href="https://www.bilibili.com/video/BV14s411E7qf?spm_id_from=333.788.b_636f6d6d656e74.10">js进阶</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1YW411T7vd">less</a></p></li></ol><blockquote><p>进阶视频</p></blockquote><ol start="5"><li><p><a href="https://www.bilibili.com/video/BV1WC4y1b78y?spm_id_from=333.788.b_636f6d6d656e74.13">AJAX</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1wr4y1K7tq?spm_id_from=333.788.b_636f6d6d656e74.26">axios</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1uK411H7on?spm_id_from=333.788.b_636f6d6d656e74.14">ES6新特性</a></p></li><li><p><a href="https://pan.baidu.com/s/12S9EuoMJXfq-sce7-4bZXA">jQuery</a> // 选学,很简单的,提取码是1111,嫌下载太慢可以来实验室我直接拷贝给你</p></li><li><p><a href="https://www.bilibili.com/video/BV1bs411E7pD?spm_id_from=333.788.b_636f6d6d656e74.16">nodejs入门</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1vy4y1s7k6?spm_id_from=333.999.0.0">了解github</a> </p></li><li><p><a href="https://www.bilibili.com/video/BV1GA411x7z1?spm_id_from=333.788.b_636f6d6d656e74.25">Promise</a> </p></li><li><p><a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=146&spm_id_from=pageDriver">Vue</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Xy4y1v7S2?spm_id_from=333.999.0.0">ts</a></p></li></ol><p>  …<br>  这些资料其实都是尚硅谷的，它本身也是有一个<a href="https://www.bilibili.com/read/cv5650633?spm_id_from=333.788.b_636f6d6d656e74.11">学习路线</a>的，但是我觉得其中有一些内容可以不着急看</p><h3 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h3><ul><li><p>HTML 了解概念和相关标签含义即可，将遇到的标签和属性纪录下来，不需要在这里花费太多精力</p></li><li><p>CSS 是前期重点。这一部分主要是要学会做笔记，要懂得分类。然后要多敲代码，敲多了就熟悉了</p></li><li><p>JS  刚开始主要学习的内容其实应该叫做 WebAPI, 这是专门用来操作浏览器事件的，这一部分理解起来不难，不过也要学会做好笔记，把重点函数和相关变量记下来，然后在敲代码过程中慢慢去记住它。</p></li><li><p>less 是为了让你写 CSS 代码更加轻松<br>ES6是为了后面的学习做铺垫<br>AJAX 其实很简单, 没课的话一天之内就能弄好了, axios 就是让你更方便的使用 AJAX</p></li></ul><blockquote><p>框架 react, Vue (AngularJS)</p></blockquote><ul><li>AngularJS 基本可以不用学, 而 react 和 Vue 的话, 推荐学习 Vue 吧, 当然也是可以两个都学习的, 但是最后基本只会使用其中一个。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="https://linhieng.com/2021/04/23/%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>https://linhieng.com/2021/04/23/%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="异步的初步理解"><a href="#异步的初步理解" class="headerlink" title="异步的初步理解"></a>异步的初步理解</h2><blockquote><p>栈和队列</p></blockquote><p>  我不想在这里讨论详细的概念, 简单说一下就是<br>  栈: 先进后出, 后进先出<br>  队: 先进先出, 后进后出, 跟排队一样</p><blockquote><p>异步任务何时调用</p></blockquote><ul><li><p>首先需要明确一个概念, 代码是在栈中执行的</p></li><li><p>代码的识别顺序是自上而下的, 这是肯定一个“真理”</p></li><li><p>当系统识别某段代码的过程, 就是系统该其放入栈中操作的过程, 但是是否会运行它还不确定</p></li><li><p>同步任务就是系统将其放入到栈中后立即运行它</p></li><li><p>异步任务就是系统将其放入到栈中后不会立即运行它, 而是先将其放入另一个空间——队列中, 等待系统后续的调用</p></li><li><p>什么时候系统会去调用队列中的代码呢？</p></li></ul><p>  当栈中没有任务时, 即空栈时系统就会去查看队列中是否有任务需要执行<br>  如果有任务, 那么会先取出<strong>一个</strong>放入到栈中<br>  注意此时的异步任务进入栈中将会被运行了, 可以理解为“异步任务”变成了“同步任务”</p><p>  当该异步任务被执行完成后, 就又是空栈了, 于是系统又会去查看队列中是否有需要执行的任务<br>  然后重复上面的过程</p><blockquote><p>对经典异步任务的解读</p></blockquote><p>  js 中的定时器 setTimeout 就是一个异步任务</p><p>  请看下面的代码</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment">// 语句1</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 语句2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment">// 语句3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>首先系统会先将语句1放入栈中, 语句1是同步任务, 于是立即运行, 即输出 ‘1’</p></li><li><p>然后系统将语句2放入栈中, 语句2是异步任务, 所以系统不会立即运行它<br>而是先将其放入放入到一个队列中(系统不会进入函数体中查看代码)<br><strong>注意</strong>, 不管设置的延迟时间是多少, 它都会先进入队列中, 因为它是异步任务</p></li><li><p>接着系统运行语句3(同步任务, 直接运行)</p></li><li><p>好了, 此时<strong>空栈</strong>了, 系统将会查看队列中是否有需要运行的任务<br>于是发现语句2正在队列中排队呢<br>因为语句2是一个定时器, 于是查看时间, 没有设置延迟时间, 那么默认就是0<br>很明显现在过去0秒了, 故将语句2放入中栈中运行<br>此时的语句2已经相当于“同步任务”了, 于是运行语句2中的函数体内容, 即输出’3’</p></li><li><p>其实上面的代码很简单, 但为什么我要专门说明一下它的过程呢？<br>那时因为如果真正理解了上面的代码, 那么不管 setTimeout 语句在任何地方, 如何嵌套<br>我们都可以清晰地推断出系统是如何工作的</p></li></ul><blockquote><p>对 setTimeout 的延迟时间参数进行补充说明</p></blockquote><p>  不知道大家是否曾对这个参数感到疑惑<br>  我们都知道 js 是单线程的, 请看下面这个代码</p><pre><code><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1999999990</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'for循环结束'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><p>  不知道大家是否会认为 setTimeout 的延迟时间是在输出‘for循环结束’后才计时的<br>  但结果却是输出 ‘for 循环结束’ 后就直接输出 1 了, 根本就没有等待 1 s<br>  下面这段代码才会等待一秒</p><pre><code><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1999999990</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'for循环结束'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><p>  如果大家有对这个输出有疑惑可能是受到 ‘js 是单线程的’ 影响了</p><p>  所以这里我想要说明的是所谓 js 是单线程的并不是指 js 只调用一个线程<br>  js 是单线程的指的是那些 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Main_thread">浏览器处理用户事件和页面绘制</a> 是单线程的<br>  但是有一些东西是可以在其他线程上执行的, 比如 setTimeout 方法的延迟时间参数<br>  它的计算其实其实在其他线程上计算的, 但系统识别到 setTimeout 时就会开始计算了<br>  只不过是计算结束后并不会去执行 setTimeout 中的回调函数, 回调函数还是需要由主线程去调用的</p><p>  所以这个延迟时间参数准确点来说其实是<strong>最低</strong>延迟时间参数</p><h2 id="异步任务中也有优先级"><a href="#异步任务中也有优先级" class="headerlink" title="异步任务中也有优先级"></a>异步任务中也有优先级</h2><blockquote><p>消息队列和作业队列</p></blockquote><p>  先来看看下面这段代码</p><pre><code><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'同步任务最先调用'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><p>  你会发现 then 代码比 setTimeout 代码更早输出<br>  但明明 then 和 setTimeout 都是异步任务, 他们应该都被放入到队列中啊<br>  没错, 他们都会被放入到队列中, 只不过是不同的队列！</p><p>  setTimeout 代码会被放在在 <strong>消息队列</strong>中<br>  而 Promise(即 then ) 会在<strong>作业队列</strong>中<br>  且系统规定了作业队列的优先级比消息队列的优先级高</p><p>  所以当栈清空时(输出了’同步任务最先调用’后)<br>  系统会优先去调用作业队列中的任务<br>  当作业队列中的任务全部执行完成后才会去调用消息队列中的任务<br>  这就能解释上面代码输出顺序的原因了</p><blockquote><p>看看下面的代码输出结果你是否能够理解</p></blockquote><ul><li><p>注意, 作业队列优先级比消息队列高<br>也就是说如果作业队列中有任务 那么系统就不会去查看消息队列中的任务</p>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1后c'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2后d'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  下面我来慢慢分析我的思路</p><ul><li><p>首先, 我的代码中没有同步任务, 所以明确一点, 系统不会先进入函数里面去执行</p></li><li><p>而是先把代码放入队列中等待调用</p></li><li><p>所以第一步先不要看函数里面的内容, 也就是将代码简化为</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 将这个代码里面的内容放入消息队列</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   <span class="token comment">// console.log('1')</span>  <span class="token comment">// setTimeout(() => &#123; console.log('4') &#125;, 0);</span>  <span class="token comment">// Promise.resolve().then(() => &#123; console.log('1后c') &#125;)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将代码里面的内容放入作业队列</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log('a')</span>  <span class="token comment">// setTimeout(() => &#123; console.log('3') &#125;, 0);</span>  <span class="token comment">// Promise.resolve().then(() => &#123; console.log('b') &#125;)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 将代码里面的内容放入消息队列</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log('2')</span>  <span class="token comment">// setTimeout(() => &#123; console.log('5') &#125;, 0);</span>  <span class="token comment">// Promise.resolve().then(() => &#123; console.log('2后d') &#125;)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接下来, 优先执行 作业队列中的代码</p></li><li><p>也就是先执行下列代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a  第一个输出'</span><span class="token punctuation">)</span><span class="token comment">// 又遇到 setTimeout , 所以将其放入消息队列中</span><span class="token comment">// 注意, 此时该代码在消息队列中已经排到第三位了</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将其放入 作业队列中</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行完 作业队列中的代码后, 发现又有新的 任务放入作业队列中</p></li><li><p>故还是会先执行作业队列中的代码, 即输出 ‘b’</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b 第二个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>此时作业队列中已经没有任务了, 可以开始执行消息队列中的代码了</p></li><li><p>拿出消息队列中的第一个代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1 第三个输出'</span><span class="token punctuation">)</span><span class="token comment">// 同样放入消息队列中</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 放入作业队列中</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1后c'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意这里, 因为我们将消息队列中的第一个任务放入到栈中执行,</p></li><li><p>所以当第一个任务执行完成后, 栈又被清空了, 此处系统还是会检查一下作业队列</p></li><li><p>然后就会发现作业队列中又有内容了, 故会执行作业队列中的内容</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1后c 第四个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作业队列又清空了, 开始执行消息队列的第二个任务了</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2 第五个输出'</span><span class="token punctuation">)</span><span class="token comment">// 放入消息队列中</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 放入作业队列</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2后d'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作业队列中又有了新的任务, 所以会先执行</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2后d 第六个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作业队列又清空了, 继续去执行消息队列中的代码</p></li><li><p>注意好现在是要去执行消息队列中的第三个任务了</p></li><li><p>不知道你现在还记不记得那个代码是第三个被放入消息队列的</p></li><li><p>不记得了也没事, 其实我的输出数字是 3 那个代码就是第三个放入消息队列的</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3 第七个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>其实现在起作业队列中已经不可能添加任务了, 所以直接执行完消息队列中的内容就可以了</p></li><li><p>我就一次性写出来了, 如果你慢慢读到这里, 我相信你也已经明白了</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4 第八个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5 第九个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>整理一下代码, 结果是</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1 第3个输出'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4 第8个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1后c 第4个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a  第1个输出'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3 第7个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'b 第2个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2 第5个输出'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5 第9个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2后d 第6个输出'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意</strong></p></blockquote></li></ul><p>上面的代码我的解释应该是有局限的, 所以不要以“我”为准, 我只是提供了一个角度思考<br>为什么我会这样说呢？那时因为我看到了<a href="https://juejin.cn/post/6945319439772434469">一道题</a>, 看完后才发现我的理解还不够深层次</p><p>所以我的这种角度只能解决 then 中的返回值是 undefined 的情况, 如果 then 中的返回值是 return Promise.resolve(); 那么就无法简单地用我上面的思路解决了, 详细请看<a href="https://juejin.cn/post/6945319439772434469">一道让我失眠的 Promise 面试题</a></p></li></ul><h2 id="浅谈事件循环"><a href="#浅谈事件循环" class="headerlink" title="浅谈事件循环"></a>浅谈事件循环</h2><blockquote><p>什么是事件循环</p></blockquote><p>  MDN 对事件循环的定义是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop">事件循环负责执行代码、收集和处理事件以及执行队列中的子任务</a><br>  也就是说 系统不断地弹栈压栈, 不断地去查看队列的过程就是事件循环</p><p>  在这个不断弹栈压栈的过程中, 有一个特殊的节点<br>  那就是空栈, 我们将<strong>空栈</strong>作为时间上的分割点<br>  那么从一次栈清空到下一次栈清空, 这个时间段我们称其为一个<strong>滴答</strong><br>  对于滴答, node 中文官网的介绍是:<br>    <a href="http://nodejs.cn/learn/understanding-process-nexttick">每当事件循环进行一次完整的行程时，我们都将其称为一个滴答。</a></p><blockquote><p>node 的 process.nextTick() 和 setImmediate()</p></blockquote><p>  对 process.nextTick() 的定义是：<a href="http://nodejs.cn/learn/understanding-process-nexttick">指示引擎在当前操作结束（在下一个事件循环滴答开始之前）时调用此函数</a></p><p>  注意不要和前面的消息队列和作业队列混淆, 它们不是一回事</p><p>  要问我如何理解的话, 用我的话来说描述就是<br>  在一个滴答周期里面, 如果这个周期中存在 process.nextTick() 函数<br>  那么当栈清空前的那一刻会先去调用所有能够识别到的 process.nextTick()【包括嵌套】<br>  待执行完成后才会去查看其他的队列中的任务(也就是开启下一个滴答)</p><p>  <strong>注意</strong> process.nextTick() 有一个设定：<br>  如果 process.nextTick() 中还有 process.nextTick()<br>  那么系统同样会去调用嵌套在里面的 process.nextTick()<br>  也就是说嵌套的 process.nextTick() 也会被执行<br>  即  <strong>当栈清空前的那一刻会先去调用该周期中(滴答) 的所有 process.nextTick() 包括嵌套的</strong></p><p>  这个做法其实有点奇怪, 但如果你测试了 setImmediate() 函数, 你将会觉得更奇怪<br>  下面这段代码, 输出结果是不唯一的！不确定的！<br>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImmediate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>  上面的代码在vscode中运行时可能是 1 2 也可能是 2 1<br>  怎么样？？怀疑人生了吗？</p><p>  尽管如何, 还是要了解一下, 简单看一下node 中文官网对它的定义吧</p><ul><li>作为 setImmediate() 参数传入的任何函数都是在事件循环的下一个迭代中执行的回调。</li><li>延迟 0 毫秒的 setTimeout() 回调与 setImmediate() 非常相似。</li><li><strong>执行顺序取决于各种因素</strong>，但是它们都会在事件循环的下一个迭代中运行。</li><li>不过注意, 这里的 setImmediate 是 node 里面的, 也就是说不是由浏览器运行的</li><li>如果你是写在 script 代码中的话, 你会发现谷歌浏览器是不支持 setImmediate() 函数的</li><li>所以这算是在提醒我们无需在意这个问题吧, 至少现阶段来说, 了解这个东西的存在即可</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 HEXO 搭建博客笔记</title>
      <link href="https://linhieng.com/2021/03/22/HEXO%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>https://linhieng.com/2021/03/22/HEXO%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前期准备工具"><a href="#前期准备工具" class="headerlink" title="前期准备工具"></a>前期准备工具</h2><blockquote><p>需要 node、npm（cnpm）、git、hexo 和 hexo 发布插件</p></blockquote><ul><li><p>安装 hexo、hexo 发布插件命令如下</p>  <pre class="line-numbers language-none"><code class="language-none">cnpm i -g hexo-cli  # 安装hexocnpm install hexo-deployer-git --save  # 安装hexo发布插件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><blockquote><p>创建博客文件夹</p></blockquote><pre><code><pre class="line-numbers language-none"><code class="language-none">hexo init hexoBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><blockquote><p>hexo 相关命令</p></blockquote><pre><code><pre class="line-numbers language-none"><code class="language-none">hexo generate，简写成 hexo ghexo s，使用本地端口预览hexo cleanhexohexo -d 上传到github上（如果没有安装hexo发布插件将无法发布）hexo g -d  直接 hexo -d 无法上传时可以使用这个, 我也不清楚为什么...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><blockquote><p>与 github 绑定</p></blockquote><ul><li><p>需要在本地创建 ssh 密钥，然后在 github 上绑定该 ssh 密钥</p>  <pre class="line-numbers language-none"><code class="language-none">【ssh-keygen -t rsa】  此命令用于创建ssh密钥 可以在后面添加 【-C &quot;备注&quot;】 用于备注  ssh密钥在 ~目录下的.ssh中的id_rsa.pub中（cd ~ 可以快速进入~目录）  绑定后可以通过 ssh -T git@github.com 测试是否成功，成功时应该会提示  Hi KeeGithub&#x2F;linhieng.github.io! You&#39;ve successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>github上添加ssh密钥后需要在站点配置文件下修改url值和deploy值<br>将url改为<br>root: <a href="https://linhieng.com/">https://linhieng.com</a><br>url如果设置不对那么会出现无法获取到css和js文件，因为路径错误<br>deploy用于设置hexo如何提交</p>  <pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 注意冒号后面有空格, repo 的值就是仓库的 https 地址, branch 就是分支名deploy:  type: git  repo: https:&#x2F;&#x2F;github.com&#x2F;KeeGithub&#x2F;linhieng.github.io.git  # 如果配置了ssh后提交还需要添加账号和密码，那么就将【https:&#x2F;&#x2F;github.com&#x2F;】改为 【】  # git@github.com:KeeGithub&#x2F;linhieng.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>现在可以通过 hexo g -d 命令将hexo部署到github上面了，记得要先在public文件夹中添加 CNAME 文件</p></li></ul><h2 id="自选主题"><a href="#自选主题" class="headerlink" title="自选主题"></a>自选主题</h2><blockquote><p>下载主题</p></blockquote><p>  下载 <a href="https://github.com/blinkfox/hexo-theme-matery">该项目的</a> 的master分支，将其整个文件放入Hexo文件的themes文件夹</p><blockquote><p>使用主题</p></blockquote><p>  在站点配置文件下将 theme: landscape 改为 theme: hexo-theme-matery<br>  hexo-theme-matery 就是刚才放入 themes 文件夹下的主题文件名<br>  为了代码高亮好看一点，还需要在站点配置文件中修改开启 prismjs (代码块)</p><pre><code><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">prismjs:  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><blockquote><p>添加自定义页面</p></blockquote><p>  在站点目录下的source下新建一个文件夹DIY, 该文件夹就是自己写的页面</p><p>  需要在站点配置文件下修改 skip_render 的值为: DIY/**</p><pre><code>  <pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">skip_render: DIY&#x2F;** # 渲染时跳过DIY目录，将DIY目录的内容直接复制到public中<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><p>  在主题配置文件中的menu中添加DIY目录</p><pre><code>  <pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">menu:  DIY页面:     url: &#x2F;DIY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><blockquote><p>主题配置文件中的其他设置</p></blockquote><ul><li><p>代码块折行，自行选择，若换行这代码块中不会出现横向滚动条</p>  <pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">break: false # 代码是否折行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>联系方式自定义修改</p>  <pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">socialLink:  github:  https:&#x2F;&#x2F;github.com&#x2F;keegithub  qq: 790728740  zhihu: https:&#x2F;&#x2F;www.zhihu.com&#x2F;Linhieng<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>显示文章字数</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">安装插件  npm i --save hexo-wordcount在主题配置文件中开启wordCount: true # 开启字数统计  顺便开启更新日期update: true # 更新日期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启 标签和分类 页</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">先创建两个页面，可以通过下面代码快捷创建（创建后会在站点目录下的source文件夹中新增两个文件夹）    hexo new page tags    hexo new page categories分别修改里面的md文件，各自添加如下内容type: &quot;categories&quot; layout: &quot;categories&quot;type: &quot;tags&quot;layout: &quot;tags&quot;然后在主题配置文件中的 menu 中开发   Tags:    url: &#x2F;tags    icon: fas fa-tags  Categories:    url: &#x2F;categories    icon: fas fa-bookmark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>提供搜索支持</p></blockquote><pre><code><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 安装  hexo-generator-search 插件# npm install hexo-generator-search --save# 在站点配置文件中新增以下配置项search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><blockquote><p>开启科技线(端点线)</p></blockquote><pre><code><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 主题配置文件中可以配置科技线，不需要再js中修改canvas_nest:  # 该选项就是用来设置科技线的  enable: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><blockquote><p>关闭或开启的内容</p></blockquote><pre><code><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">indexbtn: # 去掉主页的github按钮  enable: falsemusic: # 关闭音乐  enable: falsereward: # 关闭打赏  enable: falseclicklove: # 关闭鼠标点击爱心  enable: falsemyProjects: # 关闭我的项目  enable: falsemySkills: # 关闭我的技能  enable: falsemyGallery: # 关闭 在“关于”页面配置&quot;我的相册&quot;图片  enable: falsegithubLink: # 关闭 fork me  enable: falsereprint: # 关闭付费转载  enable: falsesharejs: # 关闭文章分享模块（通过QQ微信分享给好友之类的）  enable: falsebackground: # 开启网站背景图  enable: true  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><blockquote><p><strong>站点配置文件中的设置</strong></p></blockquote><ul><li><p>自定义 # Site 部分的内容</p></li><li><p>per_page 的值推荐设置为6的倍数</p></li><li><p>注释掉代码</p><pre class="line-numbers language-none"><code class="language-none">permalinkpermalink_defaultspretty_urls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="文章发布"><a href="#文章发布" class="headerlink" title="文章发布"></a><strong>文章发布</strong></h2><ul><li><p>文章使用md格式添加，代码块需要使用反引号括起来，不然很难看</p></li><li><p>文章中可以在开头设置一些属性，如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">title: 使用 HEXO 搭建博客笔记 # 文章标题date: 2021-03-27 19:00:00 # 文章发布日期，最好全局唯一author: Linhieng # 文章作者cover: true # 是否假如首页轮播图top: true # 是否设置为推荐文章coverImg: &#x2F;images&#x2F;1.png # 设置在轮播图中的背景图片  # 路径的根路径是public，所以在站点路径的source下新建images文件夹用来存放图片，该文件夹最后会被提交到public路径下img: &#x2F;images&#x2F;2.jpg # 文章的封面summary: 纪录了使用 HEXO 搭建博客的过程，便于以后查看 # 文章的摘要，如果没有默认截取文章的一部分categories: 笔记 # 文章分类，该分类是一个宏分类，故建议一篇文章一个分类tags: hexo # 文章标签，可以多个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="操作源代码"><a href="#操作源代码" class="headerlink" title="操作源代码"></a>操作源代码</h2><blockquote><p>关闭动态切换背景颜色和修改背景颜色</p></blockquote><ul><li>在主题文件的 /source/css/matery.css 文件中修改</li></ul>  <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 0%<span class="token punctuation">,</span> #0f9d58 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 动态切换背景颜色. */</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我将其修改为</li></ul>  <pre class="line-numbers language-none"><code class="language-none">.bg-color &#123;background-image: linear-gradient(to right, #00d9ff 0%, #addff6 100%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>操作js </p></blockquote><ul><li>在主题文件下 layout 文件夹下的 layout.js 文件中添加：</li></ul>  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>浏览器搞笑标题<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span> <span class="token keyword">var</span> OriginTitle <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">;</span> <span class="token keyword">var</span> titleTime<span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'visibilitychange'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'φ(>ω&lt;*) 看不见我！'</span><span class="token punctuation">;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>titleTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[rel="icon"]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">"https://cdn.jsdelivr.net/gh/Yafine/cdn@2.5/source/favicon.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'⁄(⁄⁄•⁄ω⁄•⁄⁄)⁄被看见了'</span> <span class="token operator">+</span> OriginTitle<span class="token punctuation">;</span> titleTime <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitle<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态科技线<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> color<span class="token operator">=</span><span class="token string">"0 0 0"</span> opacity<span class="token operator">=</span><span class="token string">'1'</span> zIndex<span class="token operator">=</span><span class="token string">"-2"</span> count<span class="token operator">=</span><span class="token string">"100"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>樱花飘落<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/sakura.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>雪花飘落<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/Yafine/cdn@3.3.4/source/js/snow1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><hr><hr><hr><hr><hr><hr><hr><h2 id="我的主题配置文件"><a href="#我的主题配置文件" class="headerlink" title="我的主题配置文件"></a>我的主题配置文件</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 顶部 的导航栏菜单menu:  DIY页面:     url: &#x2F;DIY  Tags:    url: &#x2F;tags    icon: fas fa-tags  Categories:    url: &#x2F;categories    icon: fas fa-bookmark# 这个没有生效啊# 首页封面轮播图的相关配置.cover:  showPrevNext: true # 是否显示左右切换按钮. Whether to display the left and right toggle buttons.  showIndicators: true # 是否显示指示器. # Whether to display the indicators  autoLoop: true # 是否自动轮播. Whether it is automatically rotated.  duration: 120 # 切换延迟时间. Switching delay time.  intervalTime: 5000 # 自动切换下一张的间隔时间. Automatically switch the interval of the next one.  useConfig: false # 是否使用配置文件, 在 _data&#x2F;covers.json 下配置推荐文章, false则使用主题在文章中的配置 cover coverImg  # useConfig 使用方式: 将主题 hexo-theme-matery&#x2F;source&#x2F;_data&#x2F;covers.json 移动到 my-blog&#x2F;source&#x2F;_data&#x2F;下修改配置即可# index page dream text,# 配置首页显示&quot;梦想&quot;的语句.dream:  enable: true  showTitle: true  title: 我的梦想  text: 不是每个人都应该像我这样去建造一座水晶大教堂，但是每个人都应该拥有自己的梦想，设计自己的梦想，追求自己的梦想，实现自己的梦想。梦想是生命的灵魂，是心灵的灯塔，是引导人走向成功的信仰。有了崇高的梦想，只要矢志不渝地追求，梦想就会成为现实，奋斗就会变成壮举，生命就会创造奇迹。——罗伯·舒乐# 是否显示推荐文章的标题recommend:  enable: true  showTitle: true  useConfig: false # 是否使用配置文件, 在 _data&#x2F;recommends.json 下配置推荐文章, false则会走主题配置的 top 属性  # useConfig 使用方式: 将主题 hexo-theme-matery&#x2F;source&#x2F;_data&#x2F;recommends.json 移动到 my-blog&#x2F;source&#x2F;_data&#x2F;下修改配置即可# 配置网站favicon和网站LOGOfavicon: &#x2F;favicon.pnglogo: &#x2F;medias&#x2F;logo.png# 首页 banner 中的第二行个人信息配置，留空即不启用socialLink:  github:  https:&#x2F;&#x2F;github.com&#x2F;keegithub  qq: 790728740  zhihu: https:&#x2F;&#x2F;www.zhihu.com&#x2F;Linhieng# 是否激活文章 TOC 功能，并配置TOC支持选中哪些标题类型，这是全局配置。# 可以在某篇文章的 Front-matter 中再加上&#96;toc: false&#96;，使该篇文章关闭TOC目录功能toc:  enable: true  heading: h2, h3, h4  collapseDepth: 0 # 目录默认展开层级  showToggleBtn: true # 是否显示切换TOC目录展开收缩的按钮# 代码块相关code:  lang: true # 代码块是否显示名称  copy: true # 代码块是否可复制  shrink: true # 代码块是否可以收缩  break: false # 代码是否折行# 是否激活复制文章时追加博客和作者的版权信息.copyright:  enable: true  minCharNumber: 120 # 至少复制多少个字符就追加版权信息.  description: 本文章著作权归作者所有，任何形式的转载都请注明出处。# 文章字数统计、阅读时长、总字数统计等# 文章信息--若要开启文章字数统计，需要安装 hexo-wordcount 插件，安装命令: &#96;npm i --save hexo-wordcount&#96;postInfo:  date: true # 发布日期  update: true # 更新日期  wordCount: true # 文章字数统计  totalCount: false # 站点总文章字数  min2read: false # 文章阅读时长  readCount: false # 文章阅读次数# 设置在归档页面中是否显示&#39;文章日历&#39;控件postCalendar: true# 不蒜子(http:&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;) 网站统计busuanziStatistics:  enable: true  totalTraffic: true # 总访问量  totalNumberOfvisitors: true # 总人次# 添加 Google Analytics 配置googleAnalytics:  enable: true  id:# 添加 baidu Analytics 配置baiduAnalytics:  enable: true  id:# 百度搜索资源平台提交链接baiduPush: true# The used front-end library can be replaced with the corresponding CDN address as needed,# If the specific version is not specified below, you can use the latest version.# 使用到的前端库，可按需替换成对应的CDN地址，如果下面未指定具体的版本号，使用最新的版本即可.# 注：jsdelivr可以自动帮你生成.min版的js和css，所以你在设置js及css路径中可以直接写.min.xxxlibs:  css:    matery: &#x2F;css&#x2F;matery.css    mycss: &#x2F;css&#x2F;my.css    fontAwesome: &#x2F;libs&#x2F;awesome&#x2F;css&#x2F;all.css # V5.11.1    materialize: &#x2F;libs&#x2F;materialize&#x2F;materialize.min.css # 1.0.0    aos: &#x2F;libs&#x2F;aos&#x2F;aos.css    animate: &#x2F;libs&#x2F;animate&#x2F;animate.min.css # V3.5.1    lightgallery: &#x2F;libs&#x2F;lightGallery&#x2F;css&#x2F;lightgallery.min.css # V1.6.11    aplayer: &#x2F;libs&#x2F;aplayer&#x2F;APlayer.min.css    dplayer: &#x2F;libs&#x2F;dplayer&#x2F;DPlayer.min.css    gitalk: &#x2F;libs&#x2F;gitalk&#x2F;gitalk.css    jqcloud: &#x2F;libs&#x2F;jqcloud&#x2F;jqcloud.css    tocbot: &#x2F;libs&#x2F;tocbot&#x2F;tocbot.css    prism: &#x2F;libs&#x2F;prism&#x2F;prism.css  js:    matery: &#x2F;js&#x2F;matery.js    jquery: &#x2F;libs&#x2F;jquery&#x2F;jquery.min.js    materialize: &#x2F;libs&#x2F;materialize&#x2F;materialize.min.js # 1.0.0    masonry: &#x2F;libs&#x2F;masonry&#x2F;masonry.pkgd.min.js # v4.0.0    aos: &#x2F;libs&#x2F;aos&#x2F;aos.js    scrollProgress: &#x2F;libs&#x2F;scrollprogress&#x2F;scrollProgress.min.js    lightgallery: &#x2F;libs&#x2F;lightGallery&#x2F;js&#x2F;lightgallery-all.min.js # V1.6.11    clicklove: &#x2F;libs&#x2F;others&#x2F;clicklove.js    busuanzi: &#x2F;libs&#x2F;others&#x2F;busuanzi.pure.mini.js    aplayer: &#x2F;libs&#x2F;aplayer&#x2F;APlayer.min.js    dplayer: &#x2F;libs&#x2F;dplayer&#x2F;DPlayer.min.js    crypto: &#x2F;libs&#x2F;cryptojs&#x2F;crypto-js.min.js    echarts: &#x2F;libs&#x2F;echarts&#x2F;echarts.min.js    gitalk: &#x2F;libs&#x2F;gitalk&#x2F;gitalk.min.js    valine: &#x2F;libs&#x2F;valine&#x2F;Valine.min.js # 若想保持最新版，请替换为 https:&#x2F;&#x2F;unpkg.com&#x2F;valine&#x2F;dist&#x2F;Valine.min.js  默认为 &#x2F;libs&#x2F;valine&#x2F;Valine.min.js    minivaline: &#x2F;libs&#x2F;minivaline&#x2F;MiniValine.js # latest    twikoo: &#x2F;libs&#x2F;twikoo&#x2F;twikoo.all.min.js # 若想保持最新版，请替换为 https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;twikoo&#x2F;dist&#x2F;twikoo.all.min.js  默认为 &#x2F;libs&#x2F;twikoo&#x2F;twikoo.all.min.js    jqcloud: &#x2F;libs&#x2F;jqcloud&#x2F;jqcloud-1.0.4.min.js    tocbot: &#x2F;libs&#x2F;tocbot&#x2F;tocbot.min.js    canvas_nest: &#x2F;libs&#x2F;background&#x2F;canvas-nest.js    ribbon: &#x2F;libs&#x2F;background&#x2F;ribbon.min.js    ribbonRefresh: &#x2F;libs&#x2F;background&#x2F;ribbon-refresh.min.js    ribbon_dynamic: &#x2F;libs&#x2F;background&#x2F;ribbon-dynamic.js    instantpage: &#x2F;libs&#x2F;instantpage&#x2F;instantpage.js# The post featured images that needs to be displayed when there is no image.# 无文章特色图片时需要显示的文章特色图片.featureImages:- &#x2F;medias&#x2F;featureimages&#x2F;0.jpg- &#x2F;medias&#x2F;featureimages&#x2F;1.jpg- &#x2F;medias&#x2F;featureimages&#x2F;2.jpg- &#x2F;medias&#x2F;featureimages&#x2F;3.jpg- &#x2F;medias&#x2F;featureimages&#x2F;4.jpg- &#x2F;medias&#x2F;featureimages&#x2F;5.jpg- &#x2F;medias&#x2F;featureimages&#x2F;6.jpg- &#x2F;medias&#x2F;featureimages&#x2F;7.jpg- &#x2F;medias&#x2F;featureimages&#x2F;8.jpg- &#x2F;medias&#x2F;featureimages&#x2F;9.jpg- &#x2F;medias&#x2F;featureimages&#x2F;10.jpg- &#x2F;medias&#x2F;featureimages&#x2F;11.jpg- &#x2F;medias&#x2F;featureimages&#x2F;12.jpg- &#x2F;medias&#x2F;featureimages&#x2F;13.jpg- &#x2F;medias&#x2F;featureimages&#x2F;14.jpg- &#x2F;medias&#x2F;featureimages&#x2F;15.jpg- &#x2F;medias&#x2F;featureimages&#x2F;16.jpg- &#x2F;medias&#x2F;featureimages&#x2F;17.jpg- &#x2F;medias&#x2F;featureimages&#x2F;18.jpg- &#x2F;medias&#x2F;featureimages&#x2F;19.jpg- &#x2F;medias&#x2F;featureimages&#x2F;20.jpg- &#x2F;medias&#x2F;featureimages&#x2F;21.jpg- &#x2F;medias&#x2F;featureimages&#x2F;22.jpg- &#x2F;medias&#x2F;featureimages&#x2F;23.jpg# 打字效果副标题.# 如果有符号 ‘ ，请在 ’ 前面加上 \subtitle:  enable: true  loop: true # 是否循环  showCursor: true # 是否显示光标  startDelay: 300 # 开始延迟  typeSpeed: 100 # 打字速度  backSpeed: 50 # 删除速度  sub:    - 从来没有真正的绝境, 只有心灵的迷途        - Never really desperate, only the lost of the soul    # 网页预加载.instantpage:  enable: true# banner 是否每日切换.# 若为 false, 则 banner 默认为 &#x2F;medias&#x2F;banner&#x2F;0.jpgbanner:  enable: true# CDN访问加速 # 第一次使用本功能，一定要先配置url，再&#96;hexo cl &amp;&amp; hexo g &amp;&amp; hexo d&#96;部署到GitHub的仓库，注意！必须是GitHub的仓库！# 如果必须要使用国内的coding或者gitee，可以采用双部署，同时将网站部署到两个仓库（其中一个必须是GitHub的仓库）# URL配置规则（例子如下）： https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;你的GitHub用户名&#x2F;你的仓库名# 如果想关闭此功能，将 url地址 注释或删除即可！## 注：配置了此项，就代表着本地调试的时候，网站依然会去GitHub请求资源（原来的资源），本地调试的时候记得将 此项配置 注释或者删除掉# 更多关于访问速度优化，请查看：https:&#x2F;&#x2F;blog.sky03.cn&#x2F;posts&#x2F;42790.html# 注：jsdelivr可以自动帮你生成.min版的js和css，所以你在上面设置js及css路径中可以直接写.min.xxxjsDelivr:  url: # https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;skyls03&#x2F;skyls03.github.io  # 网站背景图background:  enable: true  url: &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;Tokisaki-Galaxy&#x2F;res&#x2F;site&#x2F;medias&#x2F;background.jpg&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><p>雪花源代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/*样式一*/</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">snow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> $flake <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div id="snowbox" />'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'position'</span><span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span><span class="token string">'z-index'</span><span class="token operator">:</span><span class="token string">'9999'</span><span class="token punctuation">,</span> <span class="token string">'top'</span><span class="token operator">:</span> <span class="token string">'-50px'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&amp;#10052;'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>documentHeight <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>documentWidth<span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>defaults <span class="token operator">=</span> <span class="token punctuation">&#123;</span>minSize<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>maxSize<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>newOn<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>flakeColor<span class="token operator">:</span> <span class="token string">"#AFDAEF"</span> <span class="token comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>options<span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> interval<span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> startPositionLeft <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> documentWidth <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span>startOpacity <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sizeFlake <span class="token operator">=</span> options<span class="token punctuation">.</span>minSize <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> options<span class="token punctuation">.</span>maxSize<span class="token punctuation">,</span>endPositionTop <span class="token operator">=</span> documentHeight <span class="token operator">-</span> <span class="token number">200</span><span class="token punctuation">,</span>endPositionLeft <span class="token operator">=</span> startPositionLeft <span class="token operator">-</span> <span class="token number">500</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">500</span><span class="token punctuation">,</span>durationFall <span class="token operator">=</span> documentHeight <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5000</span><span class="token punctuation">;</span>$flake<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token operator">:</span> startPositionLeft<span class="token punctuation">,</span>opacity<span class="token operator">:</span> startOpacity<span class="token punctuation">,</span><span class="token string">'font-size'</span><span class="token operator">:</span> sizeFlake<span class="token punctuation">,</span>color<span class="token operator">:</span> options<span class="token punctuation">.</span>flakeColor<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>top<span class="token operator">:</span> endPositionTop<span class="token punctuation">,</span>left<span class="token operator">:</span> endPositionLeft<span class="token punctuation">,</span>opacity<span class="token operator">:</span> <span class="token number">0.2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>durationFall<span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>newOn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">snow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>     minSize<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment">/* 定义雪花最小尺寸 */</span>    maxSize<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token comment">/* 定义雪花最大尺寸 */</span>    newOn<span class="token operator">:</span> <span class="token number">300</span>  <span class="token comment">/* 定义密集程度，数字越小越密集 */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><hr><p>樱花源代码  图片路径没有设置</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> stop<span class="token punctuation">,</span> staticx<span class="token punctuation">;</span><span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> imgPath <span class="token operator">=</span> <span class="token string">"/图片路径"</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> imgPath<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Sakura</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token punctuation">,</span> r<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">Sakura</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cxt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cxt<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> xc <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> cxt<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> cxt<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> cxt<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token punctuation">,</span> <span class="token number">40</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span> cxt<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">Sakura</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">></span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">></span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'fnr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token function-variable function">SakuraList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sakura</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sakura<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cxt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> ret<span class="token punctuation">,</span> random<span class="token punctuation">;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token string">'x'</span><span class="token operator">:</span> ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'y'</span><span class="token operator">:</span> ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span> ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token operator">:</span> ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'fnx'</span><span class="token operator">:</span> random <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function-variable function">ret</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> random <span class="token operator">-</span> <span class="token number">1.7</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'fny'</span><span class="token operator">:</span> random <span class="token operator">=</span> <span class="token number">1.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.7</span> <span class="token function-variable function">ret</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y <span class="token operator">+</span> random<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'fnr'</span><span class="token operator">:</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.03</span><span class="token punctuation">;</span> <span class="token function-variable function">ret</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> r <span class="token operator">+</span> random<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">startSakura</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> requestAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>oRequestAnimationFrame<span class="token punctuation">;</span> <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cxt<span class="token punctuation">;</span> staticx <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span> canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span> canvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'position: fixed;left: 0;top: 0;pointer-events: none;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> canvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'canvas_sakura'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span> cxt <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> sakuraList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SakuraList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> sakura<span class="token punctuation">,</span> randomX<span class="token punctuation">,</span> randomY<span class="token punctuation">,</span> randomS<span class="token punctuation">,</span> randomR<span class="token punctuation">,</span> randomFnx<span class="token punctuation">,</span> randomFny<span class="token punctuation">;</span> randomX <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomY <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomR <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomS <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomFnx <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'fnx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomFny <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'fny'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomFnR <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'fnr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sakura <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sakura</span><span class="token punctuation">(</span>randomX<span class="token punctuation">,</span> randomY<span class="token punctuation">,</span> randomS<span class="token punctuation">,</span> randomR<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> randomFnx<span class="token punctuation">,</span> y<span class="token operator">:</span> randomFny<span class="token punctuation">,</span> r<span class="token operator">:</span> randomFnR <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sakura<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span> sakuraList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sakura<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> stop <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cxt<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> sakuraList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sakuraList<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span> stop <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> canvasSnow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas_snow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">startSakura</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">stopp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>staticx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas_sakura"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> child<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">;</span> staticx <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token function">startSakura</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">var</span> stop<span class="token punctuation">,</span> staticx<span class="token punctuation">;</span><span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>img<span class="token punctuation">.</span>src <span class="token operator">=</span> imgPath<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Sakura</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token punctuation">,</span> r<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> r<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">Sakura</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cxt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cxt<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> xc <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> cxt<span class="token punctuation">.</span><span class="token function">translate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> cxt<span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> cxt<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token punctuation">,</span> <span class="token number">40</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span> cxt<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">Sakura</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">></span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">></span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'fnr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>r <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token function-variable function">SakuraList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">sakura</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sakura<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">draw</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cxt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">SakuraList</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token parameter">option</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> ret<span class="token punctuation">,</span> random<span class="token punctuation">;</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">case</span> <span class="token string">'x'</span><span class="token operator">:</span> ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'y'</span><span class="token operator">:</span> ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span> ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token operator">:</span> ret <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'fnx'</span><span class="token operator">:</span> random <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function-variable function">ret</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> random <span class="token operator">-</span> <span class="token number">1.7</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'fny'</span><span class="token operator">:</span> random <span class="token operator">=</span> <span class="token number">1.5</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.7</span> <span class="token function-variable function">ret</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> y <span class="token operator">+</span> random<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token string">'fnr'</span><span class="token operator">:</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.03</span><span class="token punctuation">;</span> <span class="token function-variable function">ret</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> r <span class="token operator">+</span> random<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">startSakura</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> requestAnimationFrame <span class="token operator">=</span> window<span class="token punctuation">.</span>requestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>mozRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>webkitRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>msRequestAnimationFrame <span class="token operator">||</span> window<span class="token punctuation">.</span>oRequestAnimationFrame<span class="token punctuation">;</span> <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cxt<span class="token punctuation">;</span> staticx <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span> canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span> canvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">,</span> <span class="token string">'position: fixed;left: 0;top: 0;pointer-events: none;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> canvas<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'canvas_sakura'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span> cxt <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">var</span> sakuraList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SakuraList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> sakura<span class="token punctuation">,</span> randomX<span class="token punctuation">,</span> randomY<span class="token punctuation">,</span> randomS<span class="token punctuation">,</span> randomR<span class="token punctuation">,</span> randomFnx<span class="token punctuation">,</span> randomFny<span class="token punctuation">;</span> randomX <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomY <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomR <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomS <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomFnx <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'fnx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomFny <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'fny'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> randomFnR <span class="token operator">=</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token string">'fnr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sakura <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sakura</span><span class="token punctuation">(</span>randomX<span class="token punctuation">,</span> randomY<span class="token punctuation">,</span> randomS<span class="token punctuation">,</span> randomR<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> x<span class="token operator">:</span> randomFnx<span class="token punctuation">,</span> y<span class="token operator">:</span> randomFny<span class="token punctuation">,</span> r<span class="token operator">:</span> randomFnR <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sakura<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span> sakuraList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sakura<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> stop <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cxt<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvas<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> sakuraList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sakuraList<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>cxt<span class="token punctuation">)</span><span class="token punctuation">;</span> stop <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> canvasSnow <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvas_snow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">startSakura</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">stopp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>staticx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"canvas_sakura"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> child<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> window<span class="token punctuation">.</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">;</span> staticx <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token function">startSakura</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
